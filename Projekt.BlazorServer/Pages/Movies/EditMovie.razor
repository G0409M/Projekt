@page "/movies/edit/{id:int}"
@using Projekt.SharedKernel.Dto.Movie
@inject IMovieService _movieService
@inject NavigationManager _navigationManager
@using Blazored.FluentValidation
@using Projekt.Domain.Models

<PageTitle>Edit Movie</PageTitle>
<h1>Edit Movie</h1>

<EditForm Model="@_movie" OnValidSubmit="@UpdateMovie">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="@true" />
    <ValidationSummary />

    <div class="form-group">
        <label>Title: </label>
        <InputText @bind-Value="@_movie.Title" class="form-control" />
        <ValidationMessage For="@(() => _movie.Title)" />
    </div>
    <div class="form-group">
        <label>Genre: </label>
        <InputSelect @bind-Value="_movie.Genre" class="form-control">
            @foreach (var genre in Enum.GetValues(typeof(MovieGenre)))
            {
                <option value="@genre">@genre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _movie.Genre)" />
    </div>
    <div class="form-group">
        <label>Length (minutes): </label>
        <InputNumber @bind-Value="_movie.FilmLength" class="form-control" />
        <ValidationMessage For="@(() => _movie.FilmLength)" />
    </div>
    <div class="form-group">
        <label>Release Date: </label>
        <InputDate @bind-Value="_movie.ReleaseDate" class="form-control" />
        <ValidationMessage For="@(() => _movie.ReleaseDate)" />
    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-primary" type="submit"> <span class="oi oi-pencil"></span> Update </button>
        <button @onclick="BackToList" class="btn btn-secondary" type="button">
            <span class="oi oi-media-skip-backward"></span> Back To List
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;
    private UpdateMovieDto _movie = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var movie = _movieService.GetById(Id);
        _movie = new UpdateMovieDto
            {
                Id = movie.Id,
                Title = movie.Title,
                Genre = movie.Genre,
                FilmLength = movie.FilmLength, // Assuming movie.FilmLength is in minutes
                ReleaseDate = movie.ReleaseDate
            };
    }

    private void UpdateMovie()
    {
        _movieService.Update(_movie);
        _navigationManager.NavigateTo("/movies");
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/movies");
    }
}