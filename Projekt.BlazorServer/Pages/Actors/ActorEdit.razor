@page "/actors/edit/{id:int}"
@using Projekt.SharedKernel.Dto.MovieRole
@inject IMovieRoleService _movieRoleService
@inject NavigationManager _navigationManager
@using Blazored.FluentValidation
@using Projekt.Domain.Models

<PageTitle>Edit Actor</PageTitle>
<h1>Edit Actor</h1>

<EditForm Model="@_actor" OnValidSubmit="@UpdateActor">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="@true" />
    <ValidationSummary />

    <div class="form-group">
        <label>Role Name: </label>
        <InputText @bind-Value="@_actor.RoleName" class="form-control" />
        <ValidationMessage For="@(() => _actor.RoleName)" />
    </div>
    <div class="form-group">
        <label>Person Name: </label>
        <InputText @bind-Value="@_actor.PersonName" class="form-control" />
        <ValidationMessage For="@(() => _actor.PersonName)" />
    </div>
    <div class="form-group">
        <label>Movie ID: </label>
        <InputNumber @bind-Value="@_actor.MovieId" class="form-control" />
        <ValidationMessage For="@(() => _actor.MovieId)" />
    </div>
    <div class="form-group">
        <label>Role Type: </label>
        <InputSelect @bind-Value="_actor.RoleType" class="form-control">
            @foreach (var roleType in Enum.GetValues(typeof(RoleType)))
            {
                <option value="@roleType">@roleType</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _actor.RoleType)" />
    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-primary" type="submit">Update</button>
        <button @onclick="BackToList" class="btn btn-secondary" type="button">Back To List</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private FluentValidationValidator? _fluentValidationValidator;
    private UpdateMovieRoleDto _actor = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var actor = _movieRoleService.GetById(Id);
        _actor = new UpdateMovieRoleDto
            {
                Id = actor.Id,
                RoleName = actor.RoleName,
                PersonName = actor.PersonName,
                MovieId = actor.MovieId,
                RoleType = actor.RoleType
            };
    }

    private void UpdateActor()
    {
        _movieRoleService.Update(_actor);
        _navigationManager.NavigateTo("/actors");
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/actors");
    }
}
